nc: 1  # number of classes
depth_multiple: 1  # model depth multiple
width_multiple: 1  # layer channel multiple
chip: katana
image_shape: [240, 320]
anchors:
    # autogenerated by yolo
  - [0,0, 0,0, 0,0] # P3/8
  - [0,0, 0,0, 0,0] # P4/16
  - [0,0, 0,0, 0,0] # P5/32
backbone:
  # [from, number, module, args]
  #src num layer                    params                  id     rf  notes
  [[-1, 1, katana.Grayscale,        []],                  #  0      0
   [-1, 1, katana.Conv2d,           [1, 8, 3, 2]],        #  1      1
   [-1, 1, katana.BatchNorm,        [8]],                 #  2      1
   [-1, 1, katana.ReLU,             [6]],                 #  3 c1   1
   [-1, 1, katana.Conv2dInvertedResidual, [8, 4, 32, 2]],       #  4 c2   2 stride -> 2
   [-1, 1, katana.Conv2dInvertedResidual, [32, 3, 32, 2]],      #  5      4 stride -> 4
   [-1, 2, katana.Conv2dInvertedResidual, [32, 3]],             #  6     12
   [-1, 2, katana.Conv2dInvertedResidual, [32, 3]],             #  7 c3  20
   [-1, 1, katana.Conv2dInvertedResidual, [32, 3, 32, 2]],      #  8     24 stride -> 8
   [-1, 1, katana.Conv2dInvertedResidual, [32, 3]],             #  9     32
   [-1, 1, katana.Conv2dInvertedResidual, [32, 3]],             # 10 c4  40
   [-1, 1, katana.Conv2dInvertedResidual, [32, 3, 32, 2]],      # 11     48 stride -> 16
   [-1, 1, katana.Conv2dInvertedResidual, [32, 3]],             # 12     64
   [-1, 1, katana.Conv2dInvertedResidual, [32, 1.5]]]           # 13 c5  80

# YOLOv5 v6.0 head
head:
  [[ 7, 1, katana.Head,             [32, 32, 5]],         # 14 o3  40
   [10, 1, katana.Head,             [32, 32, 5]],         # 15 o4  80
   [13, 1, katana.Head,             [32, 32, 5]],         # 16 o5 160
   [[14, 15, 16], 1, katana.Detect, [nc, anchors, [32, 32, 32]]]   # 43 Detect(P3-P5)
   ]
